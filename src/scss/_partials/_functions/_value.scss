// **** values ****
// ---- depth
// ---- has-item
// ---- has-items
// ---- is-type
// ---- remove-nth
// **** maps ****
// ---- nest-gather
// ---- nest-get
// ---- nest-has-key
// ---- nest-send
// **** units ****
// ---- power
// ---- strip

// values
@function depth($object) {
  $count: 1;
  @if is-map($object) {
    @each $key, $value in $object {
      @if is-map($value) {
        $count: max(depth($value) + 1, $count);
      }
    }
  } @else if is-list($object) {
    @each $value in $object {
      @if is-map($value) {
        $count: max(depth($value) + 1, $count);
      }
    }
  }
  @return $count;
}
@function has-item($list, $item) {
  @each $listee in $list {
    @if $listee == $item {
      @return true;
    }
  }
  @return false;
}
@function has-items($list, $items) {
  @each $item in $items {
    @if not has-item($list, $item) {
      @return false;
    }
  }
  @return true;
}
@function is-bool($input) {
  @return type-of($input) == bool;
}
@function is-color($input) {
  @return type-of($input) == color;
}
@function is-dir($input) {
  @return index("up" "down" "left" "right" "out" "in", $input) != null;
}
@function is-opacity($input) {
  @return is-percent($input) or
    index("disabled" "divider" "hint" "inactive" "secondary", $input) != null;
}
@function is-list($input) {
  @return type-of($input) == list;
}
@function is-map($input) {
  @return type-of($input) == map;
}
@function is-nest($input) {
  @if is-map($input) {
    @each $key, $value in $input {
      @if is-map($value) {
        @return true;
      }
    }
  }
  @return false;
}
@function is-number($input) {
  @return type-of($input) == number;
}
@function is-string($input) {
  @return type-of($input) == string;
}
@function is-angle($input) {
  @return is-number($input) and index("deg" "grad" "rad" "turn", unit($input))
    != null;
}
@function is-integer($input) {
  @return is-number($input) and round($input) == $input;
}
@function is-percent($input) {
  @return is-number($input) and unit($input) == "%";
}
@function is-resolution($input) {
  @return is-number($input) and index("dpcm" "dpi" "dppx", unit($input)) != null;
}
@function is-time($input) {
  @return is-number($input) and
    index("ms" "msec" "s" "sec" "min" "h" "d" "mo" "yr", unit($input)) != null;
}
@function is-abs-length($input) {
  @return is-number($input) and
    index("cm" "in" "mm" "pc" "pt" "px", unit($input)) != null;
}
@function is-relative-length($input) {
  @return is-number($input) and index("ch" "em" "ex" "rem", unit($input)) !=
    null;
}
@function is-relative-view($input) {
  @return is-number($input) and index("vh" "vmax" "vmin" "vw", unit($input)) !=
    null;
}
@function is-relative($input) {
  @return is-relative-length($input) or is-relative-view($input);
}
@function is-length($input) {
  @return is-relative-length($input) or is-abs-length($input);
}
@function is-position($input) {
  @return index("top" "right" "bottom" "left" "center" "middle", $input) != null;
}
@function is-size($input) {
  @return index(
      "xsmall" "small" "medium" "large" "xlarge" "xs" "sm" "md" "lg" "xl",
      $input
    )
    != null;
}
@function remove-nth($list, $index) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }
  @return $result;
}
// maps
@function nest-gather($nest, $keys: null) {
  $nest: $nest;
  $returnMap: null;
  @if $keys {
    $nest: nest-get($nest, $keys);
  }
  $depth: depth($nest);
  $mapKeys: map-keys($nest);
  @for $i from 1 through $depth {
    @each $key, $value in $nest {
      $index: index($mapKeys, $key);
      @if not is-map($value) {
        $value: (
          $key: $value
        );
        @if $index == 1 {
          $returnMap: $value;
        } @else {
          $returnMap: map-merge($returnMap, $value);
        }
      } @else if is-map($value) {
        @if $index == 1 and $i == 1 {
          $returnMap: $value;
        } @else {
          $returnMap: map-merge($returnMap, $value);
        }
        $returnMap: map-remove($returnMap, $key);
      }
    }
    @if $i == 1 {
      $nest: $returnMap;
    } @else {
      $nest: map-merge($nest, $returnMap);
    }
  }
  @return $nest;
}
@function nest-get($nest, $keys) {
  @each $key in $keys {
    $nest: map-get($nest, $key);
  }
  @return $nest;
}
@function nest-has-key($nest, $items) {
  @each $key in $items {
    @if not map-has-key($nest, $key) {
      @return false;
    } @else {
      $nest: map-get($nest, $key);
    }
  }
  @return true;
}
@function nest-send($nest, $keys, $newValue) {
  $maps: ($nest);
  $output: null;
  @if length($keys) == 1 {
    @return map-merge(
      $nest,
      (
        $keys: $newValue
      )
    );
  }
  @for $i from 1 through (length($keys) - 1) {
    $cKey: nth($keys, $i);
    $cMap: nth($maps, -1);
    $cGet: map-get($cMap, $cKey);
    $maps: append($maps, $cGet);
  }
  @for $i from length($maps) through 1 {
    $cMap: nth($maps, $i);
    $cKey: nth($keys, $i);
    $cVal: if($i == length($maps), $newValue, $output);
    $output: map-merge(
      $cMap,
      (
        $cKey: $cVal
      )
    );
  }
  @return $output;
}
// units
@function power($number, $power: null) {
  $runner: null;
  @if (is-number($number)) and (is-number($power)) {
    $number: strip($number);
    $power: strip($power);
    $output: 1 !default;
    @if $power >= 0 {
      @for $var from 1 through $power {
        $output: $output * $number;
      }
    } @else {
      @for $var from $power to 0 {
        $output: $output / $number;
      }
    }
    @return $output;
  } @else {
    @if not is-number($number) {
      @warn 'Unknown power() number: #{$number}';
    }
    @if not is-number($power) {
      @warn 'Unknown power() power: #{$power}';
    }
  }
}
@function strip($number) {
  @if is-number($number) {
    $output: $number / ($number * 0 + 1);
    @return $output;
  } @else {
    @warn 'Unknown strip() value: #{$number}';
  }
}
