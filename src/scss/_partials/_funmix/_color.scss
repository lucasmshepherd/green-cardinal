// **** colors ****
// cast

// pull color
$castColors: nest-get($fether, color);
$castPalette: nest-gather($castColors, palette);
$castNames: map-keys($castPalette);
// pull opacity
$castOpacity: nest-get($castColors, opacity);
$castOpacityTypes: map-keys(nest-get($castOpacity, default));
// pull filter
$castFilter: nest-get($castColors, filter default);
$castFilterAmount: nest-get($castColors, filter amount);
$castTint: nest-get($castColors, filter tint);
$castShade: nest-get($castColors, filter shade);
// pull theme
$castLight: nest-get($castColors, theme light);
$castDark: nest-get($castColors, theme dark);

@function cast($input) {
  $theme: null;
  $color: null;
  $weight: null;
  $opacity: null;
  // input
  $i: 0;
  @each $item in $input {
    $i: $i + 1;
    @if is-string($item) {
      $item: to-lower-case($item);
    }
    @if is-percent($item) or has-item($castOpacityTypes, $item) {
      $opacity: $item;
    } @else if is-number($item) and unitless($item) {
      $weight: $item;
    } @else if is-color($item) {
      $color: $item;
    } @else if is-list($item) {
      $color: swatch($item);
    } @else {
      $color: $item;
    }
    @if $i > 3 {
      @warn "Too many entries for cast, there should be a maximum of three(3): color name, weight number, opacity percentage.  Note: Make sure colors with mulitple words are quoted i.e. 'Cerulean Blue'.";
    }
  }
  // color
  @if map-has-key($castPalette, $color) {
    $color: map-get($castPalette, $color);
  } @else if $color == "dark" {
    $color: $castDark;
    $theme: dark;
  } @else if $color == "light" {
    $color: $castLight;
    $theme: light;
  } @else if not is-color($color) {
    @warn "Invalid color for cast: #{$color}";
  }
  // weight
  @if not $weight {
    $weight: 500;
  }
  @if $weight > 1000 {
    $weight: 1000;
  } @else if $weight < 0 {
    $weight: 0;
  }
  @if $weight > 500 {
    $weight: ($weight - 500) * 0.2%;
    $color: mix($castShade, $color, $weight);
  } @else if $weight < 500 {
    $weight: 100% - ($weight * 0.2%);
    $color: mix($castTint, $color, $weight);
  } @else if $castFilter {
    $color: mix($castFilter, $color, $castFilterAmount);
  } @else {
    $color: rgba($color, 1);
  }
  // alpha/opacity
  @if not $opacity {
    @if $theme {
      $opacity: nest-get($castOpacity, $theme default);
    } @else {
      $opacity: 100%;
    }
  }
  @if not is-percent($opacity) {
    @if not $theme {
      $opacity: nest-get($castOpacity, default $opacity);
    } @else {
      $opacity: nest-get($castOpacity, $theme $opacity);
    }
  }
  $opacity: strip($opacity);
  $opacity: 1 - ($opacity * 0.01);
  @if is-color($color) {
    $color: transparentize($color, $opacity);
  }
  @return $color;
}

@mixin cast($input, $cssProps: color) {
  @each $prop in $cssProps {
    #{$prop}: cast($input);
  }
}
